import  os

#\t is tab
#\n is new line

def construct(file, name):# creates the base constructor class and writes the begining info and name
	n = open(file, "w+") #Opens the new file
	n.write("public class " + name + " extends Pokemon{\n") #Creates the public class with pokeomon name
	n.write("\t" + name + "(){\n") #Begins the Constructor
	n.write( "\t\t" + 'name = "' + name + '";\n') #Provides the name var in the constructor



list = [] #Array used to store all the words in the file 
id = 0 #id for the array
num = 0 #Var used for ablities cause I'm two lazy to hard code it

for subdir, dirs, files in os.walk('./'): #Checks for each file in a folder that this program is in
	for file in files: #checks each file
		ext =  file[-4:] #checks for the .exetension 
		if  ext == ".txt": # only accepts .txt files
			#print(file) #debug 
			print("Starting " + file)
			f = open(file, "r") #allows python to read data in the file
			name = file[:-4] #Pulls the Pokemon name
			file = name + ".java" # Creates a name for the new java file
			n = open(file, "a+") #Creates a java file for the Pokemon
			construct(file, name) #calls the function providing file name and pokemon name
			line = f.readline() #Reads each line in the file
			for line in f: #will go through each line in the text file
				for word in line.split(): #Will go through each file
					cleaner = word[-1:] #check the last character on the word
					if cleaner == ':': #If the last char is a :, will remove it.
						word = word[:-1]
					list.append(word)#adds each word into the array
			print(list)
			while id < (len(list) - 1): #Goes through each word in the array
				#print(list)#Debug
				id = id + 1 # goes through each id on the array
				if list[id] == "Stats": #Checks for the base stat block
					Nid = id + 2 #sets the array to where the HP stat is 
					n.write( "\t\tbHP = " + str(list[Nid]) + ";\n") #sets up the bHP var
					Nid = Nid + 2 #goes to atk stat
					n.write( "\t\tbAtk = " + str(list[Nid]) + ";\n") #sets up the bAtk var
					Nid = Nid + 2 #goes to Def stat
					n.write( "\t\tbDef = " + str(list[Nid]) + ";\n") #sets up the bDef var
					Nid = Nid + 3 #goes to bSpAtk stat
					n.write( "\t\tbSpAtk = " + str(list[Nid]) + ";\n") #sets up the bSpAtk var
					Nid = Nid + 3 #goes to bSpDef stat
					n.write( "\t\tbSpDef = " + str(list[Nid]) + ";\n") #sets up the bSpDef var
					Nid = Nid + 2 #goes to bSpd stat
					n.write( "\t\tbbSpd = " + str(list[Nid]) + ";\n") #sets up the bSpd var
					id = Nid
				if list[id] == "Type":
					Nid = id + 2
					n.write( "\t\ttype1 = " + '"' + str(list[Nid]) + '";\n') #sets up the type1 var
					Nid = Nid + 1
					if list[Nid] == "/":
						Nid = Nid + 1
						n.write( "\t\ttype2 = " + '"' + str(list[Nid]) + '";\n') #sets up the type2 var
					else:
						Nid = Nid - 1
					id = Nid
				if list[id] == "Ability":
					Nid = id + 2
					nword = list[Nid]
					Nid = Nid + 1
					if list[Nid] == "Adv":
						Nid = Nid - 1
					if list[Nid] == "Basic":
						Nid = Nid - 1
					if list[Nid] == "High":
						Nid = Nid - 1
					if Nid != (id + 2):
						nword = nword + " " + str(list[Nid])
					num += 1
					n.write( "\t\tabilities" + str(num) + " = " + '"' + nword + '";\n') #sets up the Ability artubite 

			#print(list)
			f.close()
			n.write("}")
			n.close()
			print("Finished " + file)
	